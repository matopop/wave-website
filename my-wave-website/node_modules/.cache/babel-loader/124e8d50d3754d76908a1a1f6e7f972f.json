{"ast":null,"code":"var _jsxFileName = \"/Users/before/my-wave-website/src/App.js\",\n    _s = $RefreshSig$();\n\nimport * as React from \"react\";\nimport { ethers } from \"ethers\";\nimport { useEffect, useState } from \"react\";\nimport abi from \"./utils/WavePortal.json\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [quote, setQuote] = useState(\"\");\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [waveReceived, setWaveReceived] = useState(false);\n  const [allWaves, setAllWaves] = useState([]);\n  const contractAddress = \"0xe572db35E450996A6Ccd4Fb2eC2FCfE21DFD0a3E\";\n  const etherscanContractAddress = \"https://rinkeby.etherscan.io/address/\".concat(contractAddress);\n  const contractABI = abi.abi;\n\n  const handleChange = event => {\n    setQuote(event.target.value);\n    console.log(quote);\n  };\n\n  const getAllWaves = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n        const waves = await wavePortalContract.getAllWaves();\n        let wavesCleaned = [];\n        waves.forEach(wave => {\n          wavesCleaned.push({\n            address: wave.waver,\n            timestamp: new Date(wave.timestamp * 1000),\n            message: wave.message\n          });\n        });\n        setAllWaves(wavesCleaned);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }; //async -> allow to use await -> which enable promise-based bahavior to be written\n\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        console.log(\"Make sure you have metamask!\");\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n      }\n      /*\n      \t\t\tCheck if we're authorized to access to the user's wallet.\n      \t\t\tWe are looking for eth accounts.\n      \t\t\tIf the user have multiple account, it takes the first one.\n      \t\t\t|\t|\t|\t|\t|\t|\t|\t|\t|\t|\t|\t|\t|\t|\t|\t|\t|\t|\n      \t\t\tv\tv\tv\tv\tv\tv\tv\tv\tv\tv\tv\tv\tv\tv\tv\tv\tv\tv\n      */\n\n\n      const accounts = await ethereum.request({\n        method: \"eth_accounts\"\n      });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0]; //take the first account :)\n\n        console.log(\"Found an authorized account:\", account);\n        setCurrentAccount(account);\n        getAllWaves();\n      } else {\n        console.log(\"No authorized account found\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Get Metamask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const wave = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        setWaveReceived(false);\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n        let count = await wavePortalContract.getTotalWaves();\n        let countBackUp = count;\n        console.log(\"Total waves: \", count.toNumber()); //Execute the actual wave from the smart contract\n\n        const waveTx = await wavePortalContract.wave(quote);\n        console.log(\"Mining ...\", waveTx.hash);\n        await waveTx.wait();\n        console.log(\"Mined -- \", waveTx.hash);\n        count = await wavePortalContract.getTotalWaves();\n\n        if (count !== countBackUp) {\n          console.log(\"Total waves: \", count.toNumber());\n          setWaveReceived(true);\n        }\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n\n    console.log(\"Message mined: \", quote);\n  };\n\n  const displayTable = () => /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: allWaves.map((wave, index) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          backgroundColor: \"OldLace\",\n          marginTop: \"16px\",\n          padding: \"8px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Address: \", wave.address]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Time: \", wave.timestamp.getDate() + \"/\" + (wave.timestamp.getMonth() + 1) + \"/\" + wave.timestamp.getFullYear() + \" \" + wave.timestamp.getHours() + \":\" + wave.timestamp.getMinutes() + \":\" + wave.timestamp.getSeconds()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Message: \", wave.message]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 5\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 6\n      }, this);\n    })\n  }, void 0, false);\n\n  React.useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n  React.useEffect(() => {\n    getAllWaves();\n  }, [currentAccount]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mainContainer\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dataContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: \"\\uD83D\\uDC4B Yo !\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bio\",\n        children: [\"Hey, \\xE9crit moi ta citation pr\\xE9f\\xE9r\\xE9e :).\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 48\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 54\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          href: etherscanContractAddress,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: \"Adresse du contrat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 3\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 93\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"https://faucets.chain.link/rinkeby\",\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: \"Faucet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 3\n        }, this), currentAccount && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 10\n          }, this), \"Ton adresse: \", currentAccount]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this), !currentAccount && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"waveButton\",\n        onClick: connectWallet,\n        children: \"Se connecter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this), currentAccount && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"waveButton\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            onChange: event => handleChange(event),\n            type: \"text\",\n            placeholder: \"Ins\\xE8re ta citation\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 5\n          }, this), quote === '' && /*#__PURE__*/_jsxDEV(\"button\", {\n            disabled: true,\n            children: \"Soumettre\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 24\n          }, this), quote !== '' && /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: () => wave(),\n            children: \"Soumettre\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 24\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 4\n        }, this)\n      }, void 0, false), currentAccount && waveReceived && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"received\",\n        children: \"\\uD83E\\uDD81 Re\\xE7u!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this), displayTable()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"yw1x2TWVjqRCN71yOfNDRthnQEs=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/before/my-wave-website/src/App.js"],"names":["React","ethers","useEffect","useState","abi","App","quote","setQuote","currentAccount","setCurrentAccount","waveReceived","setWaveReceived","allWaves","setAllWaves","contractAddress","etherscanContractAddress","concat","contractABI","handleChange","event","target","value","console","log","getAllWaves","ethereum","window","provider","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","waves","wavesCleaned","forEach","wave","push","address","waver","timestamp","Date","message","error","checkIfWalletIsConnected","accounts","request","method","length","account","connectWallet","alert","count","getTotalWaves","countBackUp","toNumber","waveTx","hash","wait","displayTable","map","index","backgroundColor","marginTop","padding","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { ethers } from \"ethers\";\nimport { useEffect, useState } from \"react\";\nimport abi from \"./utils/WavePortal.json\"\nimport './App.css';\n\nconst App = () =>{\n\tconst [quote, setQuote] = useState(\"\");\n\n\tconst [currentAccount, setCurrentAccount] = useState(\"\");\n\n\tconst [waveReceived, setWaveReceived] = useState(false);\n\t\n\tconst [allWaves, setAllWaves] = useState([]);\n\n\t\n\n\tconst contractAddress = \"0xe572db35E450996A6Ccd4Fb2eC2FCfE21DFD0a3E\";\n\tconst etherscanContractAddress = \"https://rinkeby.etherscan.io/address/\".concat(contractAddress);\n\tconst contractABI = abi.abi;\n\n\tconst handleChange = (event) => {\n\t\tsetQuote(event.target.value);\n\t\tconsole.log(quote);\n\t}\n\n\tconst getAllWaves = async () => {\n\t\ttry {\n\t\t\tconst { ethereum } = window;\n\t\t\tif (ethereum) {\n\t\t\t\tconst provider = new ethers.providers.Web3Provider(ethereum);\n\t\t\t\tconst signer = provider.getSigner();\n\t\t\t\tconst wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n\t\t\t\tconst waves = await wavePortalContract.getAllWaves();\n\n\t\t\t\tlet wavesCleaned = [];\n\t\t\t\twaves.forEach(wave => {\n\t\t\t\t\twavesCleaned.push({\n\t\t\t\t\t\taddress: wave.waver,\n\t\t\t\t\t\ttimestamp: new Date(wave.timestamp * 1000),\n\t\t\t\t\t\tmessage: wave.message\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\tsetAllWaves(wavesCleaned);\n\t\t\t} else {\n\t\t\t\tconsole.log(\"Ethereum object doesn't exist!\")\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t}\n\n\t//async -> allow to use await -> which enable promise-based bahavior to be written\n\tconst checkIfWalletIsConnected = async () => {\n\n\t\ttry {\n\t\t\tconst { ethereum } = window;\n\n\t\t\tif (!ethereum) {\n\t\t\t\tconsole.log(\"Make sure you have metamask!\");\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tconsole.log(\"We have the ethereum object\", ethereum);\n\t\t\t}\n\n/*\n\t\t\tCheck if we're authorized to access to the user's wallet.\n\t\t\tWe are looking for eth accounts.\n\t\t\tIf the user have multiple account, it takes the first one.\n\t\t\t|\t|\t|\t|\t|\t|\t|\t|\t|\t|\t|\t|\t|\t|\t|\t|\t|\t|\n\t\t\tv\tv\tv\tv\tv\tv\tv\tv\tv\tv\tv\tv\tv\tv\tv\tv\tv\tv\n*/\n\t\t\tconst accounts = await ethereum.request({ method: \"eth_accounts\"});\n\n\t\t\tif (accounts.length !== 0) {\n\t\t\t\tconst account = accounts[0]; //take the first account :)\n\t\t\t\tconsole.log(\"Found an authorized account:\", account);\n\t\t\t\tsetCurrentAccount(account);\n\t\t\t\tgetAllWaves();\n\t\t\t} else {\n\t\t\t\tconsole.log(\"No authorized account found\");\n\t\t\t}\n\t\t}\n\n\t\tcatch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t}\n\n\tconst connectWallet = async () => {\n\t\ttry {\n\t\t\tconst { ethereum } = window;\n\n\t\t\tif (!ethereum) {\n\t\t\t\talert(\"Get Metamask!\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n\t\t\tconsole.log(\"Connected\", accounts[0]);\n\t\t\tsetCurrentAccount(accounts[0]);\n\t\t} catch (error){\n\t\t\tconsole.log(error);\n\t\t}\n\t}\n\n\tconst wave = async () => {\n\t\ttry {\n\t\t\tconst { ethereum } = window;\n\t\t\t\n\t\t\tif (ethereum) {\n\t\t\t\t\n\t\t\t\tsetWaveReceived(false);\n\t\t\t\tconst provider = new ethers.providers.Web3Provider(ethereum);\n\t\t\t\tconst signer = provider.getSigner();\n\t\t\t\t\n\t\t\t\tconst wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n\t\t\t\tlet count = await wavePortalContract.getTotalWaves();\n\t\t\t\tlet countBackUp = count;\n\t\t\t\tconsole.log(\"Total waves: \", count.toNumber());\n\n\t\t\t\t//Execute the actual wave from the smart contract\n\t\t\t\t\n\t\t\t\tconst waveTx = await wavePortalContract.wave(quote);\n\n\t\t\t\tconsole.log(\"Mining ...\", waveTx.hash);\n\n\t\t\t\tawait waveTx.wait();\n\t\t\t\tconsole.log(\"Mined -- \", waveTx.hash);\n\n\t\t\t\tcount = await wavePortalContract.getTotalWaves();\n\t\t\t\tif (count !== countBackUp)\n\t\t\t\t{\n\t\t\t\t\tconsole.log(\"Total waves: \", count.toNumber());\n\t\t\t\t\tsetWaveReceived(true);\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tconsole.log(\"Ethereum object doesn't exist!\");\n\t\t\t\t\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t\tconsole.log(\"Message mined: \", quote);\n\t}\n\n\tconst displayTable = () =>\n\t\t<>\n\t\t{allWaves.map((wave, index) => {\n\t\t\treturn (\n\t\t\t  <div key={index} style={{ backgroundColor: \"OldLace\", marginTop: \"16px\", padding: \"8px\" }}>\n\t\t\t\t<div>Address: {wave.address}</div>\n\t\t\t\t<div>Time: {\n\t\t\t\t\t\twave.timestamp.getDate()+\n\t\t\t\t\t  \"/\"+(wave.timestamp.getMonth() + 1)+\n\t\t\t\t\t  \"/\"+wave.timestamp.getFullYear()+\n\t\t\t\t\t  \" \"+wave.timestamp.getHours()+\n\t\t\t\t\t  \":\"+wave.timestamp.getMinutes()+\n\t\t\t\t\t  \":\"+wave.timestamp.getSeconds()\n\t\t\t\t\t  }</div>\n\t\t\t\t<div>Message: {wave.message}</div>\n\t\t\t  </div>)\n\t\t  })}\n\t\t  </>\n\t\n\n\tReact.useEffect(() => {\n\t\tcheckIfWalletIsConnected();\n\t}, [])\n\t\n\tReact.useEffect(() => {\n\t\tgetAllWaves();\n\t}, [currentAccount])\n  \n  return (\n    <div className=\"mainContainer\">\n\n      <div className=\"dataContainer\">\n        <div className=\"header\">\n        👋 Yo !\n        </div>\n\n        <div className=\"bio\">\n        Hey, écrit moi ta citation préférée :).<br /><br />\n\t\t<a href={etherscanContractAddress} target=\"_blank\" rel=\"noreferrer\">Adresse du contrat</a><br />\n\t\t<a href=\"https://faucets.chain.link/rinkeby\" target=\"_blank\" rel=\"noreferrer\">Faucet</a>\n\t\t{(currentAccount) &&\n\t\t<><br/><br/>\n\t\tTon adresse: {currentAccount}\n\t\t</>}\n        </div>\n\t\t\n\t\t{/* If there is no currentAccount, it will render the - connect - button */}\n\t\t{(!currentAccount) && \n        <button className=\"waveButton\" onClick={connectWallet}>\n          Se connecter\n        </button>\n\t\t}\n\t\t{/* If there is a currentAccount, it will render the - wave - button */}\n\t\t\n\t\t{(currentAccount) &&\n\t\t\t<>\n\t\t\t<form className=\"waveButton\">\n\t\t\t\t<input onChange={(event) => handleChange(event)}\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tplaceholder=\"Insère ta citation\"\n\t\t\t\t/>\n\t\t\t\t{(quote === '') && <button disabled>Soumettre</button>}\n\t\t\t\t{(quote !== '') && <button type=\"button\" onClick={() => wave()}>Soumettre</button>}\n\t\t\t</form>\n\t\t\t</>\n\t\t}\n\t\t{(currentAccount && waveReceived) &&\n        <button className=\"received\">\n          🦁 Reçu!\n        </button>\n\t\t}\n\t\t{displayTable()}\n\t\t\n      </div>\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}