{"ast":null,"code":"var _jsxFileName = \"/Users/before/my-wave-website/src/App.js\",\n    _s = $RefreshSig$();\n\nimport * as React from \"react\";\nimport { ethers } from \"ethers\";\nimport { useEffect, useState } from \"react\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n\n  const wave = async () => {\n    try {} catch (error) {\n      console.log(error);\n    }\n\n    console.log(\"You have been waved\");\n  }; //async -> allow to use await -> which enable promise-based bahavior to be written\n\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        console.log(\"Make sure you have metamask!\");\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n      }\n      /*\n      \t\t\tCheck if we're authorized to access to the user's wallet.\n      \t\t\tWe are looking for eth accounts.\n      \t\t\tIf the user have multiple account, it takes the first one.\n      \t\t\t|\t|\t|\t|\t|\t|\t|\t|\t|\t|\t|\t|\t|\t|\t|\t|\t|\t|\n      \t\t\tv\tv\tv\tv\tv\tv\tv\tv\tv\tv\tv\tv\tv\tv\tv\tv\tv\tv\n      */\n\n\n      const accounts = await ethereum.request({\n        method: \"eth_accounts\"\n      });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0]; //take the first account :)\n\n        console.log(\"Found an authorized account:\", account);\n        setCurrentAccount(account);\n      } else {\n        console.log(\"No authorized account found\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Get Metamask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  React.useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mainContainer\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dataContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: \"\\uD83D\\uDC4B Yo !\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bio\",\n        children: \"Salut, fait moi un signe.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), !currentAccount && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"waveButton\",\n        onClick: connectWallet,\n        children: \"Se connecter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), currentAccount && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"waveButton\",\n        onClick: wave,\n        children: \"Aboyer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"Oez+vfH4X005OLgBo/Rzy9wdCKo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/before/my-wave-website/src/App.js"],"names":["React","ethers","useEffect","useState","App","currentAccount","setCurrentAccount","wave","error","console","log","checkIfWalletIsConnected","ethereum","window","accounts","request","method","length","account","connectWallet","alert"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { ethers } from \"ethers\";\nimport { useEffect, useState } from \"react\";\nimport './App.css';\n\nconst App = () =>{\n\n\tconst [currentAccount, setCurrentAccount] = useState(\"\");\n\n\tconst wave = async () => {\n\t\ttry {\n\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t\tconsole.log(\"You have been waved\");\n\t}\n\n\t//async -> allow to use await -> which enable promise-based bahavior to be written\n\tconst checkIfWalletIsConnected = async () => {\n\n\t\ttry {\n\t\t\tconst { ethereum } = window;\n\n\t\t\tif (!ethereum) {\n\t\t\t\tconsole.log(\"Make sure you have metamask!\");\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tconsole.log(\"We have the ethereum object\", ethereum);\n\t\t\t}\n\n/*\n\t\t\tCheck if we're authorized to access to the user's wallet.\n\t\t\tWe are looking for eth accounts.\n\t\t\tIf the user have multiple account, it takes the first one.\n\t\t\t|\t|\t|\t|\t|\t|\t|\t|\t|\t|\t|\t|\t|\t|\t|\t|\t|\t|\n\t\t\tv\tv\tv\tv\tv\tv\tv\tv\tv\tv\tv\tv\tv\tv\tv\tv\tv\tv\n*/\n\t\t\tconst accounts = await ethereum.request({ method: \"eth_accounts\"});\n\n\t\t\tif (accounts.length !== 0) {\n\t\t\t\tconst account = accounts[0]; //take the first account :)\n\t\t\t\tconsole.log(\"Found an authorized account:\", account);\n\t\t\t\tsetCurrentAccount(account);\n\t\t\t} else {\n\t\t\t\tconsole.log(\"No authorized account found\");\n\t\t\t}\n\t\t}\n\n\t\tcatch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t}\n\n\tconst connectWallet = async () => {\n\t\ttry {\n\t\t\tconst { ethereum } = window;\n\n\t\t\tif (!ethereum) {\n\t\t\t\talert(\"Get Metamask!\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n\t\t\tconsole.log(\"Connected\", accounts[0]);\n\t\t\tsetCurrentAccount(accounts[0]);\n\t\t} catch (error){\n\t\t\tconsole.log(error);\n\t\t}\n\t}\n\nReact.useEffect(() => {\n\tcheckIfWalletIsConnected();\n}, [])\n  \n  return (\n    <div className=\"mainContainer\">\n\n      <div className=\"dataContainer\">\n        <div className=\"header\">\n        ðŸ‘‹ Yo !\n        </div>\n\n        <div className=\"bio\">\n        Salut, fait moi un signe.\n        </div>\n\t\t\n\t\t{/* If there is no currentAccount, it will render the - connect - button */}\n\t\t{!currentAccount && \n        <button className=\"waveButton\" onClick={connectWallet}>\n          Se connecter\n        </button>\n\t\t}\n\t\t{/* If there is a currentAccount, it will render the - wave - button */}\n\t\t{currentAccount && \n        <button className=\"waveButton\" onClick={wave}>\n          Aboyer\n        </button>\n\t\t}\n      </div>\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}