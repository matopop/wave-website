{"ast":null,"code":"var _jsxFileName = \"/Users/before/my-wave-website/src/App.js\",\n    _s = $RefreshSig$();\n\nimport * as React from \"react\";\nimport { ethers } from \"ethers\";\nimport { useEffect, useState } from \"react\";\nimport abi from \"./utils/WavePortal.json\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [waveReceived, setWaveReceived] = useState(false);\n  const contractAddress = \"0x7c8E8c3026f0021794A1DFb406EadAb858892b69\";\n  const etherscanContractAddress = \"https://rinkeby.etherscan.io/address/\".concat(contractAddress);\n  const contractABI = abi.abi;\n\n  const getAllWaves = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {}\n    } catch (error) {\n      console.log(error);\n    }\n  }; //async -> allow to use await -> which enable promise-based bahavior to be written\n\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        console.log(\"Make sure you have metamask!\");\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n      }\n      /*\n      \t\t\tCheck if we're authorized to access to the user's wallet.\n      \t\t\tWe are looking for eth accounts.\n      \t\t\tIf the user have multiple account, it takes the first one.\n      \t\t\t|\t|\t|\t|\t|\t|\t|\t|\t|\t|\t|\t|\t|\t|\t|\t|\t|\t|\n      \t\t\tv\tv\tv\tv\tv\tv\tv\tv\tv\tv\tv\tv\tv\tv\tv\tv\tv\tv\n      */\n\n\n      const accounts = await ethereum.request({\n        method: \"eth_accounts\"\n      });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0]; //take the first account :)\n\n        console.log(\"Found an authorized account:\", account);\n        setCurrentAccount(account);\n      } else {\n        console.log(\"No authorized account found\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Get Metamask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const wave = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        setWaveReceived(false);\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n        let count = await wavePortalContract.getTotalWaves();\n        let countBackUp = count;\n        console.log(\"Nombre total de signe: \", count.toNumber()); //Execute the actual wave from the smart contract\n\n        const waveTx = await wavePortalContract.wave();\n        console.log(\"Mining ...\", waveTx.hash);\n        await waveTx.wait();\n        console.log(\"Mined -- \", waveTx.hash);\n        count = await wavePortalContract.getTotalWaves();\n\n        if (count != countBackUp) {\n          console.log(\"Nombre total de signe: \", count.toNumber());\n          setWaveReceived(true);\n        }\n      } else {\n        console.log(\"L'objet Ethereum n'existe pas!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n\n    console.log(\"You have been waved\");\n  };\n\n  React.useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mainContainer\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dataContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: \"\\uD83D\\uDC4B Yo !\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bio\",\n        children: [\"Salut chien maigre, connecte toi puis aboie.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 53\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 59\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          href: etherscanContractAddress,\n          target: \"_blank\",\n          children: \"Adresse du contrat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 3\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 76\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"https://faucets.chain.link/rinkeby\",\n          target: \"_blank\",\n          children: \"Faucet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 3\n        }, this), currentAccount && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 10\n          }, this), \"Ton adresse: \", currentAccount]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), !currentAccount && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"waveButton\",\n        onClick: connectWallet,\n        children: \"Se connecter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), currentAccount && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"waveButton\",\n        onClick: wave,\n        children: \"Aboyer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), currentAccount && waveReceived && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"received\",\n        children: \"\\uD83E\\uDD81 Re\\xE7u!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"oWduHlUNebgSJpdZ6ipHAjbDVb0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/before/my-wave-website/src/App.js"],"names":["React","ethers","useEffect","useState","abi","App","currentAccount","setCurrentAccount","waveReceived","setWaveReceived","contractAddress","etherscanContractAddress","concat","contractABI","getAllWaves","ethereum","window","error","console","log","checkIfWalletIsConnected","accounts","request","method","length","account","connectWallet","alert","wave","provider","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","count","getTotalWaves","countBackUp","toNumber","waveTx","hash","wait"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,GAAP,MAAgB,yBAAhB;AACA,OAAO,WAAP;;;;AAEA,MAAMC,GAAG,GAAG,MAAK;AAAA;;AAEhB,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCJ,QAAQ,CAAC,EAAD,CAApD;AAEA,QAAM,CAACK,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAAC,KAAD,CAAhD;AAEA,QAAMO,eAAe,GAAG,4CAAxB;AACA,QAAMC,wBAAwB,GAAG,wCAAwCC,MAAxC,CAA+CF,eAA/C,CAAjC;AACA,QAAMG,WAAW,GAAGT,GAAG,CAACA,GAAxB;;AAGA,QAAMU,WAAW,GAAG,YAAY;AAC/B,QAAI;AACH,YAAM;AAAEC,QAAAA;AAAF,UAAeC,MAArB;;AACA,UAAID,QAAJ,EAAc,CAEb;AACD,KALD,CAKE,OAAOE,KAAP,EAAc;AACfC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA;AACD,GATD,CAXgB,CAuBhB;;;AACA,QAAMG,wBAAwB,GAAG,YAAY;AAE5C,QAAI;AACH,YAAM;AAAEL,QAAAA;AAAF,UAAeC,MAArB;;AAEA,UAAI,CAACD,QAAL,EAAe;AACdG,QAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACA;AACA,OAHD,MAGO;AACND,QAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2CJ,QAA3C;AACA;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACG,YAAMM,QAAQ,GAAG,MAAMN,QAAQ,CAACO,OAAT,CAAiB;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAjB,CAAvB;;AAEA,UAAIF,QAAQ,CAACG,MAAT,KAAoB,CAAxB,EAA2B;AAC1B,cAAMC,OAAO,GAAGJ,QAAQ,CAAC,CAAD,CAAxB,CAD0B,CACG;;AAC7BH,QAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CM,OAA5C;AACAlB,QAAAA,iBAAiB,CAACkB,OAAD,CAAjB;AACA,OAJD,MAIO;AACNP,QAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACA;AACD,KA1BD,CA4BA,OAAOF,KAAP,EAAc;AACbC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA;AACD,GAjCD;;AAmCA,QAAMS,aAAa,GAAG,YAAY;AACjC,QAAI;AACH,YAAM;AAAEX,QAAAA;AAAF,UAAeC,MAArB;;AAEA,UAAI,CAACD,QAAL,EAAe;AACdY,QAAAA,KAAK,CAAC,eAAD,CAAL;AACA;AACA;;AAED,YAAMN,QAAQ,GAAG,MAAMN,QAAQ,CAACO,OAAT,CAAiB;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAjB,CAAvB;AAEAL,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBE,QAAQ,CAAC,CAAD,CAAjC;AACAd,MAAAA,iBAAiB,CAACc,QAAQ,CAAC,CAAD,CAAT,CAAjB;AACA,KAZD,CAYE,OAAOJ,KAAP,EAAa;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA;AACD,GAhBD;;AAkBA,QAAMW,IAAI,GAAG,YAAY;AACxB,QAAI;AACH,YAAM;AAAEb,QAAAA;AAAF,UAAeC,MAArB;;AAEA,UAAID,QAAJ,EAAc;AACbN,QAAAA,eAAe,CAAC,KAAD,CAAf;AACA,cAAMoB,QAAQ,GAAG,IAAI5B,MAAM,CAAC6B,SAAP,CAAiBC,YAArB,CAAkChB,QAAlC,CAAjB;AACA,cAAMiB,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;AAEA,cAAMC,kBAAkB,GAAG,IAAIjC,MAAM,CAACkC,QAAX,CAAoBzB,eAApB,EAAqCG,WAArC,EAAkDmB,MAAlD,CAA3B;AAEA,YAAII,KAAK,GAAG,MAAMF,kBAAkB,CAACG,aAAnB,EAAlB;AACA,YAAIC,WAAW,GAAGF,KAAlB;AACAlB,QAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCiB,KAAK,CAACG,QAAN,EAAvC,EATa,CAWb;;AACA,cAAMC,MAAM,GAAG,MAAMN,kBAAkB,CAACN,IAAnB,EAArB;AAEAV,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BqB,MAAM,CAACC,IAAjC;AAEA,cAAMD,MAAM,CAACE,IAAP,EAAN;AACAxB,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBqB,MAAM,CAACC,IAAhC;AAEAL,QAAAA,KAAK,GAAG,MAAMF,kBAAkB,CAACG,aAAnB,EAAd;;AACA,YAAID,KAAK,IAAIE,WAAb,EACA;AACCpB,UAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCiB,KAAK,CAACG,QAAN,EAAvC;AACA9B,UAAAA,eAAe,CAAC,IAAD,CAAf;AACA;AAED,OA1BD,MA0BO;AACNS,QAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACA;AACD,KAhCD,CAgCE,OAAOF,KAAP,EAAc;AACfC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA;;AACDC,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACA,GArCD;;AAuCDnB,EAAAA,KAAK,CAACE,SAAN,CAAgB,MAAM;AACrBkB,IAAAA,wBAAwB;AACxB,GAFD,EAEG,EAFH;AAIE,sBACE;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA,2BAEE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAKE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA,gFAC4C;AAAA;AAAA;AAAA;AAAA,gBAD5C,eACkD;AAAA;AAAA;AAAA;AAAA,gBADlD,eAEN;AAAG,UAAA,IAAI,EAAET,wBAAT;AAAmC,UAAA,MAAM,EAAC,QAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFM,eAEmE;AAAA;AAAA;AAAA;AAAA,gBAFnE,eAGN;AAAG,UAAA,IAAI,EAAC,oCAAR;AAA6C,UAAA,MAAM,EAAC,QAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHM,EAIJL,cAAD,iBACD;AAAA,kCAAE;AAAA;AAAA;AAAA;AAAA,kBAAF,eAAO;AAAA;AAAA;AAAA;AAAA,kBAAP,mBACcA,cADd;AAAA,wBALM;AAAA;AAAA;AAAA;AAAA;AAAA,cALF,EAgBF,CAACA,cAAF,iBACK;AAAQ,QAAA,SAAS,EAAC,YAAlB;AAA+B,QAAA,OAAO,EAAEoB,aAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAjBF,EAsBFpB,cAAD,iBACK;AAAQ,QAAA,SAAS,EAAC,YAAlB;AAA+B,QAAA,OAAO,EAAEsB,IAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAvBF,EA2BFtB,cAAc,IAAIE,YAAnB,iBACK;AAAQ,QAAA,SAAS,EAAC,UAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA5BF;AAAA;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,UADF;AAsCD,CA9JD;;GAAMH,G;;KAAAA,G;AAgKN,eAAeA,GAAf","sourcesContent":["import * as React from \"react\";\nimport { ethers } from \"ethers\";\nimport { useEffect, useState } from \"react\";\nimport abi from \"./utils/WavePortal.json\"\nimport './App.css';\n\nconst App = () =>{\n\n\tconst [currentAccount, setCurrentAccount] = useState(\"\");\n\n\tconst [waveReceived, setWaveReceived] = useState(false);\n\n\tconst contractAddress = \"0x7c8E8c3026f0021794A1DFb406EadAb858892b69\";\n\tconst etherscanContractAddress = \"https://rinkeby.etherscan.io/address/\".concat(contractAddress);\n\tconst contractABI = abi.abi;\n\n\n\tconst getAllWaves = async () => {\n\t\ttry {\n\t\t\tconst { ethereum } = window;\n\t\t\tif (ethereum) {\n\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t}\n\n\n\t//async -> allow to use await -> which enable promise-based bahavior to be written\n\tconst checkIfWalletIsConnected = async () => {\n\n\t\ttry {\n\t\t\tconst { ethereum } = window;\n\n\t\t\tif (!ethereum) {\n\t\t\t\tconsole.log(\"Make sure you have metamask!\");\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tconsole.log(\"We have the ethereum object\", ethereum);\n\t\t\t}\n\n/*\n\t\t\tCheck if we're authorized to access to the user's wallet.\n\t\t\tWe are looking for eth accounts.\n\t\t\tIf the user have multiple account, it takes the first one.\n\t\t\t|\t|\t|\t|\t|\t|\t|\t|\t|\t|\t|\t|\t|\t|\t|\t|\t|\t|\n\t\t\tv\tv\tv\tv\tv\tv\tv\tv\tv\tv\tv\tv\tv\tv\tv\tv\tv\tv\n*/\n\t\t\tconst accounts = await ethereum.request({ method: \"eth_accounts\"});\n\n\t\t\tif (accounts.length !== 0) {\n\t\t\t\tconst account = accounts[0]; //take the first account :)\n\t\t\t\tconsole.log(\"Found an authorized account:\", account);\n\t\t\t\tsetCurrentAccount(account);\n\t\t\t} else {\n\t\t\t\tconsole.log(\"No authorized account found\");\n\t\t\t}\n\t\t}\n\n\t\tcatch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t}\n\n\tconst connectWallet = async () => {\n\t\ttry {\n\t\t\tconst { ethereum } = window;\n\n\t\t\tif (!ethereum) {\n\t\t\t\talert(\"Get Metamask!\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n\t\t\tconsole.log(\"Connected\", accounts[0]);\n\t\t\tsetCurrentAccount(accounts[0]);\n\t\t} catch (error){\n\t\t\tconsole.log(error);\n\t\t}\n\t}\n\n\tconst wave = async () => {\n\t\ttry {\n\t\t\tconst { ethereum } = window;\n\n\t\t\tif (ethereum) {\n\t\t\t\tsetWaveReceived(false);\n\t\t\t\tconst provider = new ethers.providers.Web3Provider(ethereum);\n\t\t\t\tconst signer = provider.getSigner();\n\t\t\t\t\n\t\t\t\tconst wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n\t\t\t\tlet count = await wavePortalContract.getTotalWaves();\n\t\t\t\tlet countBackUp = count;\n\t\t\t\tconsole.log(\"Nombre total de signe: \", count.toNumber());\n\n\t\t\t\t//Execute the actual wave from the smart contract\n\t\t\t\tconst waveTx = await wavePortalContract.wave();\n\n\t\t\t\tconsole.log(\"Mining ...\", waveTx.hash);\n\n\t\t\t\tawait waveTx.wait();\n\t\t\t\tconsole.log(\"Mined -- \", waveTx.hash);\n\n\t\t\t\tcount = await wavePortalContract.getTotalWaves();\n\t\t\t\tif (count != countBackUp)\n\t\t\t\t{\n\t\t\t\t\tconsole.log(\"Nombre total de signe: \", count.toNumber());\n\t\t\t\t\tsetWaveReceived(true);\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tconsole.log(\"L'objet Ethereum n'existe pas!\");\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t\tconsole.log(\"You have been waved\");\n\t}\n\nReact.useEffect(() => {\n\tcheckIfWalletIsConnected();\n}, [])\n  \n  return (\n    <div className=\"mainContainer\">\n\n      <div className=\"dataContainer\">\n        <div className=\"header\">\n        👋 Yo !\n        </div>\n\n        <div className=\"bio\">\n        Salut chien maigre, connecte toi puis aboie.<br /><br />\n\t\t<a href={etherscanContractAddress} target=\"_blank\">Adresse du contrat</a><br />\n\t\t<a href=\"https://faucets.chain.link/rinkeby\" target=\"_blank\">Faucet</a>\n\t\t{(currentAccount) &&\n\t\t<><br/><br/>\n\t\tTon adresse: {currentAccount}\n\t\t</>}\n        </div>\n\t\t\n\t\t{/* If there is no currentAccount, it will render the - connect - button */}\n\t\t{(!currentAccount) && \n        <button className=\"waveButton\" onClick={connectWallet}>\n          Se connecter\n        </button>\n\t\t}\n\t\t{/* If there is a currentAccount, it will render the - wave - button */}\n\t\t{(currentAccount) && \n        <button className=\"waveButton\" onClick={wave}>\n          Aboyer\n        </button>\n\t\t}\n\t\t{(currentAccount && waveReceived) &&\n        <button className=\"received\">\n          🦁 Reçu! \n        </button>\n\t\t}\n      </div>\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}